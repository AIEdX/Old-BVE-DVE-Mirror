import { ItemMeshSetData } from "Meta/Render/Meshes/ItemMesh.types.js";
import { SetChunkMeshTask } from "Meta/Tasks/RenderTasks.types.js";
export declare const MeshManager: {
    scene: any;
    runningUpdate: boolean;
    meshes: Record<any, Record<number, Record<string, any>>>;
    entityMesh: {
        pickable: boolean;
        checkCollisions: boolean;
        seralize: boolean;
        clearCachedGeometry: boolean;
        createTemplateMesh(scene: any): any;
        syncSettings(settings: import("../../Meta/index.js").EngineSettingsData): void;
        _applyVertexData(mesh: any, data: any): void;
        rebuildMeshGeometory(mesh: any, data: any): Promise<any>;
        createMesh(x: number, y: number, z: number, data: any): Promise<any>;
    };
    itemMesh: {
        pickable: boolean;
        checkCollisions: boolean;
        seralize: boolean;
        clearCachedGeometry: boolean;
        createTemplateMesh(scene: any): any;
        syncSettings(settings: import("../../Meta/index.js").EngineSettingsData): void;
        _applyVertexData(mesh: any, data: ItemMeshSetData): void;
        rebuildMeshGeometory(mesh: any, data: ItemMeshSetData): Promise<any>;
        createMesh(x: number, y: number, z: number, data: ItemMeshSetData): Promise<any>;
    };
    meshMakers: Record<any, any>;
    $INIT(): void;
    setScene(scene: any): void;
    reStart(): void;
    removeChunkMesh(dimesnion: number, type: any, chunkKey: string): void;
    handleItemUpdate(x: number, y: number, z: number, data: any): void;
    handleEntityUpdate(x: number, y: number, z: number, data: any): void;
    handleChunkUpdate(dimesnion: number, type: any, chunkKey: string, data: SetChunkMeshTask): void;
    requestChunkBeRemoved(dimesnion: number, chunkKey: string): void;
    _updateMesh(dimesnion: number, type: any, chunkKey: string, data: any): Promise<void>;
    _buildNewMesh(dimesnion: number, type: any, chunkKey: string, data: any): Promise<void>;
};
